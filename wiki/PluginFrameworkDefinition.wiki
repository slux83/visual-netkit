#summary Cosa un plugin puo' richiedere/offrire
#labels Featured,Phase-Requirements,Phase-Design

= Plugin framework definition =

== Introduzione ==

Va detto prima di ogni cosa che il tool nella sua versione base, ossia senza la presenza di qualsiasi plug-in, puo' dare all'utente la possibilita' di creare e definire la struttura topologica di una rete di computers (vista a livello 2).

Tale rete e' quindi composta da 3 elementi base: Virtual Machines, Collision Domain e links tra questi (dave i links rappresentano interfacce ethernet di una virtual machine). 

Le infarmazioni celate dietro a questi 3 componenti, sono solamente le loro etichette che sono viste come identificatori (nomi) univoci nel loro genere.

== Definizione di un plug-in ==

E' importante definire la linea di demarcazione tra cosa puo' e cosa non puo' richiedere un plugin al sistema.

Un plugin e' sostanzialmente una caratterizzazione di qualche tipo, applicata a uno o piu' dei tre componenti fondamentali citati prima. Quindi in base al tipo di "plugin applicato" ad un elemento, tale plugin sara' responsabile ad offrire ulteriori caratteristiche all'elemento a cui e' applicato, rendendolo via via sempre meno generico (ossia salendo la pila ISO-OSI). Su un elemento possono essere attivi piu' plugins, dove ognuno di questi plasma una parte di comportamento ma stando attenti a non creare conflitti tra i vari plugins attivi sul medesimo componente.

La natura di un plugin, ossia qual'e' il suo compito e su quali elementi e' applicato, viene definita in vari modi:
 * una volta scelto un componente, l'utente decide se a questo va associato un certo plugin; questo implica che il plugin opera sull'oggetto richiedente
 * un plugin puo' essere un plugin di gruppo, ossia puo' operare su piu' componenti e addirittura sulla totalita' del laboratorio. Questo processo e' deciso dal plugin stesso, che dopo essere stato creato per operare su un determinato componente, puo' egli stesso chiedere al sistema di essere "collegato" ad altri componenti. (si pensi alla macchina virtuale e alle interfacce di rete collegate ad essa)

=== Cosa un plugin deve offrire ===

Ogni plugin deve offrire alcune caratteristiche al sistema che provvedera' ad applicare tali azioni verso gli elementi di cui il plugin e' responsabile, caratterizzandone il comportamento.
Il plugin deve quindi offrire:

 * una lista (coppie key-value) di proprieta' di cui l'elemento dovra' disporre;
 * una descrizione (meta-descrizione) di queste proprieta' per far si che il sistema riesca a ricavarne una interfaccia grafica per la manipolazione; ad esempio esporre i valiri di default, ecc... Il controllo su tali valori e' per giunta delegato al plugin stesso, e la "connessione" tra l'interfaccia grafica e il plugin-handler e' delegato al sistema di gestione dei plugins.
 * Il plugin deve offrire eventuali templates testuali (files di configurazione o parti di essi) nonche' il path di collocazione all'interno del laboratorio; Se il laboratorio possiede gia' quel determinato file di configurazione, il sistema stesso dovra' provvedere ad effettuare un marge (nella maggior parte dei casi un append) tra il file esistente e le informazioni offerte dal plugin.
 * Il plugin deve offrire una descrizione (un'etichetta) da collocare all'elemento a livello grafico.
 * Il plugin puo' avere un meccanismo di "monitoring" sui file di configurazione di cui lui e' responsabile; tale sistema di monitoraggio puo' provvedere ad aggiornare le informazioni dell'elemento/i in real-time. (Si pensi all'intervento dell'utente che modifica le informazioni di un file di configurazione al di fuori dell'IDE).

=== Cosa il sistema offre ai plugins ===
