#summary (Italian) Casi d'uso

= Introduzione =

Descrizione dei casi d'uso in modo strutturato.



----
= UC-Crea lab `[DONE: 70%]` =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* sistema avviato


*Post-condizioni:* è stato creato un nuovo lab ed e' stato associato come corrente


*Scenario Principale di Successo:* l’utente sceglie di creare un nuovo lab dal menu principale. Il nuovo lab viene creato e associato come corrente.

*Variante:*
 * se e' gia' esistente un lab corrente, il sistema provvede a chiedere all'utente (eventualmente se necessario) il salvataggio dello stesso e la conferma a chiudere l'attuale laboratorio e a settare quello nuovo come nuovo lab corrente.



= UC-Modifica proprietà lab `[DONE: 100%]` =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* sistema avviato


*Pre-condizioni:* esiste un lab in memoria ed è il lab corrente


*Post-condizioni:* il lab è stato modificato in una delle sue proprietà


*Scenario Principale di Successo:* l'utente vuol modificare alcune proprietà del lab (quali nome, versione, data, descrizione, etc...). L'utente seleziona l'elemento "root" presente all'interno del Tree della dock Laboratory e il sistema dopo la selezione carica nella dock Property editor tutte le varie coppie (chiave, valore).
L'utente accede (doppio click) ad un valore desiderato e lo modifica. Una volta modificato il campo, il sistema provvede ad effettuare la modifica per il campo scelto.

----
= UC-Crea VM `[DONE: 80%]`=

*Attore:* utente finale

*Contesto:* applicazione principale


*Pre-condizioni:* esiste un lab in memoria ed è il lab corrente


*Post-condizioni:* è stata creata una nuova VM ed è stata associata al lab corrente


*Scenario Principale di Successo:* L'utente seleziona dal menu'/toolbar l'azione di "add virtual machine" che risulta mutuamente esclusiva rispetto alle altre azioni che governano la scena. L'utente clicca con il mouse su un'area della scena e il sistema mostra una form per l'acquisizione dei dati riguardanti la nuova macchina virtuale.
La form in particolare mostra campi per l'inserimento di dati quali: nome della macchina virtuale, plugins che si vogliono utilizzare (e che caratterizzano il "tipo" della vm). L'utente clicca su OK, e il sistema crea tutte le varie instanze degli oggetti e mostra sulla scena la macchina virtuale etichettata dal suo nome, ed eventuali etichette offerte dai plugins.
Al momento di creazione l'utente puo' decidere se inizializzare manualmente le varie proprieta' offerte dai plugins attivati, oppure mantenere i valori di default.


= UC-Modifica proprieta' di una VM =

*Attore:* utente finale

*Contesto:* applicazione principale


*Pre-condizioni:* esiste una VM in memoria


*Post-condizioni:* una proprieta' della VM prescelta è stata cambiata


*Scenario Principale di Successo:* l'utente seleziona una delle vm presenti nella dock della vista ad albero della scena, oppure doppio click su una macchina posta sulla scena. Il sistema provvede a mostrare tutte li proprieta' della macchina all'interno della dock "property editor" seguite dalle proprieta' offerte da eventuali plugins usati da quella macchina virtuale. L'utente tramite quest'ultima puo' modificare le varie priprieta' e il sistema provvede ad aggiornare i dati.


= UC-Aggiungi una interfaccia di rete per una VM =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* esiste una VM in memoria


*Post-condizioni:* e' stata aggiunta una interfaccia di rete alla macchina selezionata


*Scenario Principale di Successo:* l'utente seleziona una delle vm presenti nella scena grafica. Con il tasto destro del muose l'utente accede al menu' della vm selezionata e sceglie l'opzione "Manage hardware interfaces". Il sistema provvede a mostrare un form che mostra tutte le interfaccie di rete della macchina e offre la possibilita' di crearne uno nuova. L'utente deve inserire il nome della nuova interfaccia di rete, nonche' l'indirizzo ip, la netmask (se lo desidera), lo stato (UP | DOWN) ecc... In questo momento, la nuova interfaccia di rete non e' connessa a nessun dominio di collisione.


----
= UC-Crea Collision Domain =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* esiste un lab in memoria ed è quello corrente

*Post-condizioni:* è stato creato un nuovo Collision Domain ed associato al lab


*Scenario Principale di Successo:* l’utente crea un nuovo CD associandogli nome, ip, netmask...
Note: non è necessario che siano già presenti VM o altri elementi nel lab



= UC-Modifica Collision Domain =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* esiste un CD in memoria ed è quello corrente


*Post-condizioni:* il CD corrente è stato modificato


*Scenario Principale di Successo:* l’utente modifica le proprietà del CD corrente.



= UC-Rinomina Collision Domain =

*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* esiste un CD in memoria ed è quello corrente


*Post-condizioni:* il CD corrente è stato rinominato


*Scenario Principale di Successo:* l’utente specifica il nuovo nome per il CD corrente.


----
= UC-Open LAB =


*Attore:* utente finale

*Contesto:* applicazione principale

*Pre-condizioni:* non vi e' un lab corrente in memoria (vedi variante)


*Post-condizioni:* è stato caricato in memoria un lab pre-esistente su filesystem (creato precedentemente con il tool)


*Scenario Principale di Successo:* l'utente tramite l'azione "Open Lab" seleziona la directory dov'e' presente il lab precedentemente salvato. Il sistema provvede a "validare" il lab cercando il file lab.xml e lab.conf. Se si ha un esito positivo, il sistema crea in memoria un lab, e inizia ad instanziare gli oggetti (e eventuali plugins per ognuno di essi) e creare tutti i mappings. Il parsing delle informazioni extra presenti nei vari files di configurazione, e' lasciato al singolo plugin.